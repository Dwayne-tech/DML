{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPsxdB/xd5FQ20tUBMaiE5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dwayne-tech/DML/blob/main/OOP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JuD7JptMegAY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rOmZiRV98sBZ",
        "outputId": "07e0a8e5-a018-41cd-ceaf-0cf2e4571ef7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Library Menu:\n",
            "1. Display available books\n",
            "2. Borrow a book\n",
            "3. Return a book\n",
            "4. Exit\n",
            "Enter your choice: 2\n",
            "Enter the title of the book you want to borrow: Rich dad Poor dad\n",
            " you have borrowed \"Rich dad Poor dad\" \n",
            "\n",
            "Library Menu:\n",
            "1. Display available books\n",
            "2. Borrow a book\n",
            "3. Return a book\n",
            "4. Exit\n"
          ]
        }
      ],
      "source": [
        "#Create a class called Book\n",
        "class Book:\n",
        "    def __init__(self, title, author, is_borrowed):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "        self.is_borrowed = False\n",
        "#Create a method for the Book class:\n",
        "    def borrow_book(self):\n",
        "        if not self.is_borrowed:\n",
        "            self.is_borrowed = True\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "    def return_book(self):\n",
        "        if self.is_borrowed:\n",
        "            self.is_borrowed = False\n",
        "            return True\n",
        "        return False\n",
        "#Create a class called Library\n",
        "class Library:\n",
        "     def __init__(self,books):\n",
        "         self.books = []\n",
        "\n",
        "#Add a Book object to the library's collection.\n",
        "     def add_book(self,book):\n",
        "      self.books.append(book)\n",
        "# Allow a user to borrow a book if it exists and is available\n",
        "     def borrow_book(self,title):\n",
        "      # Corrected: Changed 'self.book' to 'self.books' to iterate over the list of books\n",
        "      for book in self.books:\n",
        "        if book.title == title and not book.is_borrowed:\n",
        "          book.borrow_book()\n",
        "          return f' you have borrowed \"{title}\" '\n",
        "      return f' The book \"{title}\" is not available'\n",
        "# Allow a user to return a borrowed book\n",
        "\n",
        "     def return_book(self,title):\n",
        "      # Corrected: Changed 'self.book' to 'self.books' to iterate over the list of books\n",
        "      for book in self.books:\n",
        "        if book.title == title and book.is_borrowed:\n",
        "          book.return_book()\n",
        "          return f' you have returned \"{title}\" '\n",
        "      return f' The book \"{title}\" was not borrowed'\n",
        "#Prints the titles of all books that are not currently borrowed.\n",
        "     def display_available_books(self):\n",
        "         available_books= [book.title for book in self.books if not book.is_borrowed]\n",
        "         if available_books:\n",
        "            print ('Available books:')\n",
        "         for title in available_books:\n",
        "            print(title)\n",
        "         else:\n",
        "            print('No books are available')\n",
        "#create a library instance\n",
        "library = Library([]) # Pass an empty list to the books argument\n",
        "# Add some books to the library\n",
        "book1 = Book(\"Rich dad Poor dad\", \"Robert Kiyosaki\", False)\n",
        "book2 = Book(\"The five Love languages\", \"Gary chapman\", False)\n",
        "book3 = Book(\"Romeo & Juliet\", \"William shakespeare\", False)\n",
        "\n",
        "library.add_book(book1)\n",
        "library.add_book(book2)\n",
        "library.add_book(book3)\n",
        "\n",
        "#User menu\n",
        "def user_name():\n",
        "        print(\"\\nLibrary Menu:\")\n",
        "        print(\"1. Display available books\")\n",
        "        print(\"2. Borrow a book\")\n",
        "        print(\"3. Return a book\")\n",
        "        print(\"4. Exit\")\n",
        "        choice = input(\"Enter your choice: \")\n",
        "        if choice == '1':\n",
        "           library.display_available_books()\n",
        "        elif choice == '2':\n",
        "            title = input(\"Enter the title of the book you want to borrow: \")\n",
        "            print(library.borrow_book(title))\n",
        "        elif choice == '3':\n",
        "            title = input(\"Enter the title of the book you want to return: \")\n",
        "            print(library.return_book(title))\n",
        "        elif choice == '4':\n",
        "            print(\"Exiting the library menu.\")\n",
        "\n",
        "        else:\n",
        "            print(\"Invalid choice. Please try again.\")\n",
        "\n",
        "\n",
        "#run the user name\n",
        "user_menu()\n",
        "\n",
        "\n",
        "# Display available books\n",
        "library.display_available_books()\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a class called Book\n",
        "class Book:\n",
        "    def __init__(self, title, author, is_borrowed):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "        self.is_borrowed = False\n",
        "#Create a method for the Book class:\n",
        "    def borrow_book(self):\n",
        "        if not self.is_borrowed:\n",
        "            self.is_borrowed = True\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "    def return_book(self):\n",
        "        if self.is_borrowed:\n",
        "            self.is_borrowed = False\n",
        "            return True\n",
        "        return False\n",
        "#Create a class called Library\n",
        "class Library:\n",
        "     def __init__(self,books):\n",
        "         self.books = []\n",
        "\n",
        "#Add a Book object to the library's collection.\n",
        "     def add_book(self,book):\n",
        "      self.books.append(book)\n",
        "# Allow a user to borrow a book if it exists and is available\n",
        "     def borrow_book(self,title):\n",
        "      # Corrected: Changed 'self.book' to 'self.books' to iterate over the list of books\n",
        "      for book in self.books:\n",
        "        if book.title == title and not book.is_borrowed:\n",
        "          book.borrow_book()\n",
        "          return f' you have borrowed \"{title}\" '\n",
        "      return f' The book \"{title}\" is not available'\n",
        "# Allow a user to return a borrowed book\n",
        "\n",
        "     def return_book(self,title):\n",
        "      # Corrected: Changed 'self.book' to 'self.books' to iterate over the list of books\n",
        "      for book in self.books:\n",
        "        if book.title == title and book.is_borrowed:\n",
        "          book.return_book()\n",
        "          return f' you have returned \"{title}\" '\n",
        "      return f' The book \"{title}\" was not borrowed'\n",
        "#Prints the titles of all books that are not currently borrowed.\n",
        "     def display_available_books(self):\n",
        "         available_books= [book.title for book in self.books if not book.is_borrowed]\n",
        "         if available_books:\n",
        "            print ('Available books:')\n",
        "         for title in available_books:\n",
        "            print(title)\n",
        "         else:\n",
        "            print('No books are available')\n",
        "#create a library instance\n",
        "library = Library([]) # Pass an empty list to the books argument\n",
        "# Add some books to the library\n",
        "book1 = Book(\"Rich dad Poor dad\", \"Robert Kiyosaki\", False) #Corrected, added \"False\" to is_borrowed\n",
        "book2 = Book(\"The five Love languages\", \"Gary chapman\", False) #Corrected, added \"False\" to is_borrowed\n",
        "book3 = Book(\"Romeo & Juliet\", \"William shakespeare\", False) #Corrected, added \"False\" to is_borrowed\n",
        "\n",
        "library.add_book(book1)\n",
        "library.add_book(book2)\n",
        "library.add_book(book3)\n",
        "\n",
        "#User menu\n",
        "def user_menu(): # Fixed: Removed 'self' parameter, Corrected indentation for function body\n",
        "    while True:\n",
        "        print(\"\\nLibrary Menu:\")\n",
        "        print(\"1. Display available books\")\n",
        "        print(\"2. Borrow a book\")\n",
        "        print(\"3. Return a book\")\n",
        "        print(\"4. Exit\")\n",
        "        choice = input(\"Enter your choice: \")\n",
        "\n",
        "        if choice == '1':\n",
        "            library.display_available_books() # Fixed: Called method on 'library' object\n",
        "        elif choice == '2':\n",
        "            title = input(\"Enter the title of the book you want to borrow: \")\n",
        "            print(library.borrow_book(title))"
      ],
      "metadata": {
        "id": "4CICBW9Qi1Gc"
      },
      "execution_count": 70,
      "outputs": []
    }
  ]
}